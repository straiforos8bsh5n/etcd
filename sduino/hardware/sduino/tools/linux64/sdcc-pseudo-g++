#!/bin/bash

# wrapper around SDCC to let the external interface look more gcc-alike
#
# Differences:
# - if a .cpp files is given as input temporarly copy it to .c and compile it
#   as a c file. This will break the dependency check, as it expects the the
#   full original filename, but as this happens only for the original .ino
#   file it is not a big loss.
# - generate .rel files, but copy them as .o files as well to satisfy the
#   dependency checker on following builds


# ANSI color codes to beautify the output:
BLACK='\E[0;30m'
RED='\E[0;31m'
GREEN='\E[0;32m'
ORANGE='\E[0;33m'
BLUE='\E[0;34m'
PURPLE='\E[0;35m'
CYAN='\E[0;36m'
LGRAY='\E[0;37m'
DGRAY='\E[1;30m'
LRED='\E[1;31m'
LGREEN='\E[1;32m'
YELLOW='\E[1;33m'
LBLUE='\E[1;34m'
LPURPLE='\E[1;35m'
LCYAN='\E[1;36m'
WHITE='\E[1;37m'
OFF='\E[0m'


# echo the full command line in cyan:
>&2 echo -e "${CYAN}${@}${OFF}"

# echo the mark id in green and the compiler call in white:
SDCC=/opt/sdcc/bin/sdcc
SRC=$1
OBJ=$2
REL=${OBJ%.o}.rel
MARK=$3
shift 3
>&2 echo -e "${GREEN}Mark $MARK:${OFF}" "$SDCC" "$@" "$SRC" -o "$OBJ"

if [[ $SRC == *.cpp ]]; then
	>&2 echo -e "${RED}cpp gefunden${OFF}";
	CSRC="${SRC%pp}"
	cp -av "$SRC" "$CSRC"
	"$SDCC" "$@" "$CSRC" -o "$OBJ"
	rm -f "$CSRC"
else
	"$SDCC" "$@" "$SRC" -o "$OBJ"
fi

# copy the generated .rel files as an .o file to avoid recompiling the next time
if [ -e "${REL}" ]; then
	cp -a "${REL}" "${OBJ}"
fi
